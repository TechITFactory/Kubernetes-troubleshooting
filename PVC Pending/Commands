Recreate: PVC references a non-existent StorageClass:
pvc-bad-sc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-badsc
  namespace: storage-lab
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests: { storage: 1Gi }
  storageClassName: does-not-exist   # intentional
---
apiVersion: v1
kind: Pod
metadata:
  name: app-badsc
  namespace: storage-lab
spec:
  containers:
  - name: app
    image: busybox:1.36
    command: ["sh","-c","echo hello > /data/hello && sleep 3600"]
    volumeMounts:
    - name: data
      mountPath: /data
  volumes:
  - name: data
    persistentVolumeClaim: { claimName: data-badsc }


Deploy & Observe:
kubectl create ns storage-lab
kubectl apply -f pvc-bad-sc.yaml
kubectl -n storage-lab get pvc
kubectl -n storage-lab describe pvc data-badsc     # Events: storageclass not found
kubectl -n storage-lab get pod app-badsc
kubectl -n storage-lab describe pod app-badsc      # "unbound immediate PersistentVolumeClaims"

Resolve:
Option A — point to default SC (often standard on local clusters):
kubectl -n storage-lab patch pvc data-badsc -p '{"spec":{"storageClassName":"standard"}}'

Option B — unset to use the default SC:
kubectl -n storage-lab patch pvc data-badsc -p '{"spec":{"storageClassName":null}}'

Verify:
kubectl -n storage-lab get pvc data-badsc -w   # should move to Bound
kubectl -n storage-lab get pod app-badsc -w    # should move to Running
kubectl -n storage-lab exec app-badsc -- cat /data/hello
-------------------------

Recreate: Access mode mismatch (RWX on SC that supports only RWO):
pvc-bad-mode.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-badmode
  namespace: storage-lab
spec:
  accessModes: ["ReadWriteMany"]   # many drivers on laptops don't support RWX
  resources:
    requests: { storage: 1Gi }
  storageClassName: standard

Deploy & Observe:
kubectl -n storage-lab apply -f pvc-bad-mode.yaml
kubectl -n storage-lab describe pvc data-badmode
# Expect: no compatible provisioner / access mode not satisfied


Resolve:
Use ReadWriteOnce, or pick an SC that supports RWX (e.g., NFS/EFS/Azure Files).
kubectl -n storage-lab patch pvc data-badmode -p '{"spec":{"accessModes":["ReadWriteOnce"]}}'
# If patch not allowed (immutable fields), delete & recreate:
kubectl -n storage-lab delete pvc data-badmode
# then create with accessModes: ["ReadWriteOnce"]
-----------------------------

Recreate a mount permission failure: Try Your Self

apiVersion: v1
kind: Pod
metadata:
  name: app-perms
  namespace: storage-lab
spec:
  securityContext:
    fsGroup: 2000               # ensure group ownership on mount
  containers:
  - name: app
    image: busybox:1.36
    command: ["sh","-c","touch /data/test && ls -l /data && sleep 3600"]
    volumeMounts:
    - { name: data, mountPath: /data }
  volumes:
  - name: data
    persistentVolumeClaim: { claimName: data-badsc }   # use the bound PVC from scenario 1


